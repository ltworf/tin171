# -*- coding: utf-8 -*-

# Copyright (C) 2012  Salvo "LtWorf" Tomaselli
# Copyright (C) 2012 Göran Weinholt
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# author Salvo "LtWorf" Tomaselli <tiposchi@tiscali.it>
# author Göran Weinholt

from math import sqrt

BOARD_LENGTH = 17*17
PEG_IDS = "x123456"
INVALID = '#'
EMPTY = ' '
NEIGHBORS = [ +1, -1, -18, -17, +18, +17 ]
FULL_BOARD = '####1################11###############111##############1111#########3333     5555#####333      555######33       55#######3        5########         ########6        4#######66       44######666      444#####6666     4444#########2222##############222###############22################2###'
REVERSED_FULL_BOARD = {' ': [72, 73, 74, 75, 76, 89, 90, 91, 92, 93, 94, 106, 107, 108, 109, 110, 111, 112, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 142, 143, 144, 145, 146, 147, 148, 158, 159, 160, 161, 162, 163, 164, 165, 176, 177, 178, 179, 180, 181, 182, 194, 195, 196, 197, 198, 199, 212, 213, 214, 215, 216], '#': [0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 81, 82, 83, 84, 85, 98, 99, 100, 101, 102, 103, 115, 116, 117, 118, 119, 120, 121, 132, 133, 134, 135, 136, 137, 138, 139, 149, 150, 151, 152, 153, 154, 155, 156, 167, 168, 169, 170, 171, 172, 173, 185, 186, 187, 188, 189, 190, 203, 204, 205, 206, 207, 221, 222, 223, 224, 225, 226, 227, 228, 229, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287], '1': [4, 21, 22, 38, 39, 40, 55, 56, 57, 58], '3': [68, 69, 70, 71, 86, 87, 88, 104, 105, 122], '2': [230, 231, 232, 233, 248, 249, 250, 266, 267, 284], '5': [77, 78, 79, 80, 95, 96, 97, 113, 114, 131], '4': [166, 183, 184, 200, 201, 202, 217, 218, 219, 220], '6': [157, 174, 175, 191, 192, 193, 208, 209, 210, 211]}
OPPOSITES=[None,2,1,4,3,6,5]

def pretty_print(board):
    for i in range(len(board)):
        if i %17==0: print
        print board[i],
        

def static_distance_from_target(board,player):
    data=(None, # V4
          (-1, -1, -1, -1, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 21, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, 20, 20, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 17, 17, 17, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 15, 15, 15, 15, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, 13, 12, 12, 12, 13, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 10, 10, 10, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, 8, 8, 8, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 6, 6, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 4, 4, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, -1, -1, -1),
          (-1, -1, -1, -1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 2, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 3, 3, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 4, 4, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 7, 6, 6, 7, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 8, 8, 8, 8, 8, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 11, 10, 10, 10, 10, 11, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 13, 13, 12, 12, 12, 13, 13, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 16, 15, 15, 15, 15, 16, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 17, 17, 17, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 20, 20, 20, 20, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 22, 21, 22, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 23, 23, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 24, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 46, 24, 23, 22, 19, 19, 16, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, 24, 23, 22, 20, 18, 16, 13, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, 23, 21, 20, 17, 15, 13, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 20, 17, 15, 12, 10, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, 20, 17, 15, 12, 10, 8, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 15, 12, 10, 8, 6, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 16, 13, 10, 8, 6, 4, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, 13, 11, 8, 7, 4, 3, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 11, 9, 7, 5, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 5, 7, 9, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 7, 8, 11, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 6, 8, 10, 13, 16, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 6, 8, 10, 12, 15, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 7, 8, 10, 12, 15, 17, 20, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 10, 12, 15, 17, 20, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 11, 13, 15, 17, 20, 21, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, 16, 18, 20, 22, 23, 24, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 16, 19, 19, 22, 23, 24, 46, 57, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 16, 19, 19, 22, 23, 24, 46, 57, -1, -1, -1, -1, -1, -1, -1, -1, 11, 13, 16, 18, 20, 22, 23, 24, 46, -1, -1, -1, -1, -1, -1, -1, -1, 9, 11, 13, 15, 17, 20, 21, 23, 24, -1, -1, -1, -1, -1, -1, -1, -1, 7, 8, 10, 12, 15, 17, 20, 22, 23, -1, -1, -1, -1, -1, -1, -1, -1, 5, 7, 8, 10, 12, 15, 17, 20, 22, -1, -1, -1, -1, -1, -1, -1, -1, 3, 4, 6, 8, 10, 12, 15, 18, 19, -1, -1, -1, -1, -1, -1, -1, -1, 2, 3, 4, 6, 8, 10, 13, 16, 19, -1, -1, -1, -1, -1, -1, -1, -1, 1, 2, 3, 4, 7, 8, 11, 13, 16, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 5, 7, 9, 11, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
          (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 11, 9, 7, 5, 3, 2, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, 16, 13, 11, 8, 7, 4, 3, 2, 1, -1, -1, -1, -1, -1, -1, -1, -1, 19, 16, 13, 10, 8, 6, 4, 3, 2, -1, -1, -1, -1, -1, -1, -1, -1, 19, 18, 15, 12, 10, 8, 6, 4, 3, -1, -1, -1, -1, -1, -1, -1, -1, 22, 20, 17, 15, 12, 10, 8, 7, 5, -1, -1, -1, -1, -1, -1, -1, -1, 23, 22, 20, 17, 15, 12, 10, 8, 7, -1, -1, -1, -1, -1, -1, -1, -1, 24, 23, 21, 20, 17, 15, 13, 11, 9, -1, -1, -1, -1, -1, -1, -1, -1, 46, 24, 23, 22, 20, 18, 16, 13, 11, -1, -1, -1, -1, -1, -1, -1, -1, 57, 46, 24, 23, 22, 19, 19, 16, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))

    pos = [i for i in xrange(288) if board[i]==str(player)]
    distances = [data[player][i] for i in pos]
    return reduce ((lambda a,b:a+b),distances,0)

def evolved_distance(board, player):
    """A board evaluation function based on a genetic algorithm's idea
    of what a good function might be."""
    data=(None, #generation 7822
          (-1, -1, -1, -1, 501, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 518, 437, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, 203, 152, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 219, 185, 131, 220, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195, 191, 59, 139, 106, 96, 141, 112, 146, 5, 53, 49, 6, -1, -1, -1, -1, -1, 137, 73, 131, 154, 54, 90, 128, 81, 193, 55, 154, 45, -1, -1, -1, -1, -1, -1, 204, 165, 83, 98, 46, 52, 62, 142, 69, 83, 145, -1, -1, -1, -1, -1, -1, -1, 201, 69, 82, 47, 33, 108, 89, 188, 40, 69, -1, -1, -1, -1, -1, -1, -1, -1, 177, 56, 247, 27, 31, 77, 102, 130, 94, -1, -1, -1, -1, -1, -1, -1, -1, 97, 123, 150, 135, 23, 199, 105, 139, 204, 222, -1, -1, -1, -1, -1, -1, -1, 218, 17, 203, 56, 41, 22, 117, 90, 15, 45, 78, -1, -1, -1, -1, -1, -1, 135, 172, 109, 73, 227, 21, 196, 181, 183, 165, 156, 61, -1, -1, -1, -1, -1, 171, 61, 155, 162, 72, 153, 5, 124, 72, 184, 10, 52, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -32, 3, 5, -3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -61, -62, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -53, -1, -1, -1, -1),
          (-1, -1, -1, -1, -53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -62, -61, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -3, 5, 3, -32, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 52, 10, 184, 72, 124, 5, 153, 72, 162, 155, 61, 171, -1, -1, -1, -1, -1, 61, 156, 165, 183, 181, 196, 21, 227, 73, 109, 172, 135, -1, -1, -1, -1, -1, -1, 78, 45, 15, 90, 117, 22, 41, 56, 203, 17, 218, -1, -1, -1, -1, -1, -1, -1, 222, 204, 139, 105, 199, 23, 135, 150, 123, 97, -1, -1, -1, -1, -1, -1, -1, -1, 94, 130, 102, 77, 31, 27, 247, 56, 177, -1, -1, -1, -1, -1, -1, -1, -1, 69, 40, 188, 89, 108, 33, 47, 82, 69, 201, -1, -1, -1, -1, -1, -1, -1, 145, 83, 69, 142, 62, 52, 46, 98, 83, 165, 204, -1, -1, -1, -1, -1, -1, 45, 154, 55, 193, 81, 128, 90, 54, 154, 131, 73, 137, -1, -1, -1, -1, -1, 6, 49, 53, 5, 146, 112, 141, 96, 106, 139, 59, 191, 195, -1, -1, -1, -1, -1, -1, -1, -1, -1, 220, 131, 185, 219, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 152, 203, 222, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 437, 518, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 501, -1, -1, -1, -1),
          (-1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 49, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 154, 145, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 55, 83, 69, -1, -1, -1, -1, -1, -1, -1, -1, -1, 501, 437, 152, 220, 146, 193, 69, 40, 94, 222, 78, 61, 162, -1, -1, -1, -1, -1, 518, 203, 131, 112, 81, 142, 188, 130, 204, 45, 156, 52, -1, -1, -1, -1, -1, -1, 222, 185, 141, 128, 62, 89, 102, 139, 15, 165, 10, -1, -1, -1, -1, -1, -1, -1, 219, 96, 90, 52, 108, 77, 105, 90, 183, 184, -1, -1, -1, -1, -1, -1, -1, -1, 106, 54, 46, 33, 31, 199, 117, 181, 72, -1, -1, -1, -1, -1, -1, -1, -1, 139, 154, 98, 47, 27, 23, 22, 196, 124, -3, -1, -1, -1, -1, -1, -1, -1, 59, 131, 83, 82, 247, 135, 41, 21, 5, 5, -62, -1, -1, -1, -1, -1, -1, 191, 73, 165, 69, 56, 150, 56, 227, 153, 3, -61, 0, -1, -1, -1, -1, -1, 195, 137, 204, 201, 177, 123, 203, 73, 72, -32, 5, 2, -53, -1, -1, -1, -1, -1, -1, -1, -1, -1, 97, 17, 109, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 218, 172, 155, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 135, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 171, -1, -1, -1, -1),
          (-1, -1, -1, -1, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 135, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 155, 172, 218, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, 109, 17, 97, -1, -1, -1, -1, -1, -1, -1, -1, -1, -53, 2, 5, -32, 72, 73, 203, 123, 177, 201, 204, 137, 195, -1, -1, -1, -1, -1, 0, -61, 3, 153, 227, 56, 150, 56, 69, 165, 73, 191, -1, -1, -1, -1, -1, -1, -62, 5, 5, 21, 41, 135, 247, 82, 83, 131, 59, -1, -1, -1, -1, -1, -1, -1, -3, 124, 196, 22, 23, 27, 47, 98, 154, 139, -1, -1, -1, -1, -1, -1, -1, -1, 72, 181, 117, 199, 31, 33, 46, 54, 106, -1, -1, -1, -1, -1, -1, -1, -1, 184, 183, 90, 105, 77, 108, 52, 90, 96, 219, -1, -1, -1, -1, -1, -1, -1, 10, 165, 15, 139, 102, 89, 62, 128, 141, 185, 222, -1, -1, -1, -1, -1, -1, 52, 156, 45, 204, 130, 188, 142, 81, 112, 131, 203, 518, -1, -1, -1, -1, -1, 162, 61, 78, 222, 94, 40, 69, 193, 146, 220, 152, 437, 501, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69, 83, 55, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 145, 154, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, 49, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1),
          (-1, -1, -1, -1, 195, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137, 191, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 204, 73, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 201, 165, 131, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, 171, 135, 218, 97, 177, 69, 83, 154, 106, 219, 222, 518, 501, -1, -1, -1, -1, -1, 61, 172, 17, 123, 56, 82, 98, 54, 96, 185, 203, 437, -1, -1, -1, -1, -1, -1, 155, 109, 203, 150, 247, 47, 46, 90, 141, 131, 152, -1, -1, -1, -1, -1, -1, -1, 162, 73, 56, 135, 27, 33, 52, 128, 112, 220, -1, -1, -1, -1, -1, -1, -1, -1, 72, 227, 41, 23, 31, 108, 62, 81, 146, -1, -1, -1, -1, -1, -1, -1, -1, -32, 153, 21, 22, 199, 77, 89, 142, 193, 5, -1, -1, -1, -1, -1, -1, -1, 5, 3, 5, 196, 117, 105, 102, 188, 69, 55, 53, -1, -1, -1, -1, -1, -1, 2, -61, 5, 124, 181, 90, 139, 130, 40, 83, 154, 49, -1, -1, -1, -1, -1, -53, 0, -62, -3, 72, 183, 15, 204, 94, 69, 145, 45, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 165, 45, 222, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 156, 78, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 61, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 162, -1, -1, -1, -1),
          (-1, -1, -1, -1, 162, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 78, 156, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 222, 45, 165, 184, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 45, 145, 69, 94, 204, 15, 183, 72, -3, -62, 0, -53, -1, -1, -1, -1, -1, 49, 154, 83, 40, 130, 139, 90, 181, 124, 5, -61, 2, -1, -1, -1, -1, -1, -1, 53, 55, 69, 188, 102, 105, 117, 196, 5, 3, 5, -1, -1, -1, -1, -1, -1, -1, 5, 193, 142, 89, 77, 199, 22, 21, 153, -32, -1, -1, -1, -1, -1, -1, -1, -1, 146, 81, 62, 108, 31, 23, 41, 227, 72, -1, -1, -1, -1, -1, -1, -1, -1, 220, 112, 128, 52, 33, 27, 135, 56, 73, 162, -1, -1, -1, -1, -1, -1, -1, 152, 131, 141, 90, 46, 47, 247, 150, 203, 109, 155, -1, -1, -1, -1, -1, -1, 437, 203, 185, 96, 54, 98, 82, 56, 123, 17, 172, 61, -1, -1, -1, -1, -1, 501, 518, 222, 219, 106, 154, 83, 69, 177, 97, 218, 135, 171, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, 131, 165, 201, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 73, 204, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 191, 137, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 195, -1, -1, -1, -1))
    return sum([ data[player][i] for i in peg_positions(board, player) ])

def evolved_distance3(board, player):
    """A board evaluation function based on a genetic algorithm's idea
    of a good function for three-player games."""
    # Generation 3594 from genetic-data-3p-superior.txt
    data=(None,
          (-1, -1, -1, -1, 519, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 492, 514, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203, 204, 202, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 213, 191, 202, 237, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, 103, 47, 193, 157, 183, 106, 93, 101, 179, 170, 110, 5, -1, -1, -1, -1, -1, 157, 202, 41, 63, 74, 66, 113, 77, 158, 109, 10, 6, -1, -1, -1, -1, -1, -1, 60, 118, 82, 183, 44, 202, 55, 131, 111, 8, 123, -1, -1, -1, -1, -1, -1, -1, 52, 164, 105, 61, 31, 236, 33, 178, 43, 146, -1, -1, -1, -1, -1, -1, -1, -1, 102, 69, 188, 25, 23, 27, 197, 48, 77, -1, -1, -1, -1, -1, -1, -1, -1, 160, 107, 178, 104, 19, 190, 91, 140, 163, 31, -1, -1, -1, -1, -1, -1, -1, 139, 131, 91, 152, 16, 102, 97, 30, 185, 121, 190, -1, -1, -1, -1, -1, -1, 93, 119, 102, 81, 26, 16, 26, 39, 205, 33, 214, 90, -1, -1, -1, -1, -1, 183, 128, 134, 68, 43, 14, 52, 92, 144, 9, 154, 179, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -10, -27, -5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -12, -1, -1, -1, -1),
          (-1, -1, -1, -1, -12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -59, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -5, -27, -10, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, 179, 154, 9, 144, 92, 52, 14, 43, 68, 134, 128, 183, -1, -1, -1, -1, -1, 90, 214, 33, 205, 39, 26, 16, 26, 81, 102, 119, 93, -1, -1, -1, -1, -1, -1, 190, 121, 185, 30, 97, 102, 16, 152, 91, 131, 139, -1, -1, -1, -1, -1, -1, -1, 31, 163, 140, 91, 190, 19, 104, 178, 107, 160, -1, -1, -1, -1, -1, -1, -1, -1, 77, 48, 197, 27, 23, 25, 188, 69, 102, -1, -1, -1, -1, -1, -1, -1, -1, 146, 43, 178, 33, 236, 31, 61, 105, 164, 52, -1, -1, -1, -1, -1, -1, -1, 123, 8, 111, 131, 55, 202, 44, 183, 82, 118, 60, -1, -1, -1, -1, -1, -1, 6, 10, 109, 158, 77, 113, 66, 74, 63, 41, 202, 157, -1, -1, -1, -1, -1, 5, 110, 170, 179, 101, 93, 106, 183, 157, 193, 47, 103, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 237, 202, 191, 213, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 202, 204, 203, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 514, 492, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 519, -1, -1, -1, -1),
          (-1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 110, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 170, 10, 123, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179, 109, 8, 146, -1, -1, -1, -1, -1, -1, -1, -1, -1, 519, 514, 202, 237, 101, 158, 111, 43, 77, 31, 190, 90, 139, -1, -1, -1, -1, -1, 492, 204, 202, 93, 77, 131, 178, 48, 163, 121, 214, 179, -1, -1, -1, -1, -1, -1, 203, 191, 106, 113, 55, 33, 197, 140, 185, 33, 154, -1, -1, -1, -1, -1, -1, -1, 213, 183, 66, 202, 236, 27, 91, 30, 205, 9, -1, -1, -1, -1, -1, -1, -1, -1, 157, 74, 44, 31, 23, 190, 97, 39, 144, -1, -1, -1, -1, -1, -1, -1, -1, 193, 63, 183, 61, 25, 19, 102, 26, 92, -5, -1, -1, -1, -1, -1, -1, -1, 47, 41, 82, 105, 188, 104, 16, 16, 52, -27, -1, -1, -1, -1, -1, -1, -1, 103, 202, 118, 164, 69, 178, 152, 26, 14, -10, 0, -59, -1, -1, -1, -1, -1, 8, 157, 60, 52, 102, 107, 91, 81, 43, 5, 4, 0, -12, -1, -1, -1, -1, -1, -1, -1, -1, -1, 160, 131, 102, 68, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, 119, 134, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 128, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, -1, -1, -1, -1),
          (-1, -1, -1, -1, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 128, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 134, 119, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 68, 102, 131, 160, -1, -1, -1, -1, -1, -1, -1, -1, -1, -12, 0, 4, 5, 43, 81, 91, 107, 102, 52, 60, 157, 8, -1, -1, -1, -1, -1, -59, 0, -10, 14, 26, 152, 178, 69, 164, 118, 202, 103, -1, -1, -1, -1, -1, -1, -1, -27, 52, 16, 16, 104, 188, 105, 82, 41, 47, -1, -1, -1, -1, -1, -1, -1, -5, 92, 26, 102, 19, 25, 61, 183, 63, 193, -1, -1, -1, -1, -1, -1, -1, -1, 144, 39, 97, 190, 23, 31, 44, 74, 157, -1, -1, -1, -1, -1, -1, -1, -1, 9, 205, 30, 91, 27, 236, 202, 66, 183, 213, -1, -1, -1, -1, -1, -1, -1, 154, 33, 185, 140, 197, 33, 55, 113, 106, 191, 203, -1, -1, -1, -1, -1, -1, 179, 214, 121, 163, 48, 178, 131, 77, 93, 202, 204, 492, -1, -1, -1, -1, -1, 139, 90, 190, 31, 77, 43, 111, 158, 101, 237, 202, 514, 519, -1, -1, -1, -1, -1, -1, -1, -1, -1, 146, 8, 109, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 123, 10, 170, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 110, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1),
          (-1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 157, 103, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 60, 202, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 118, 41, 193, -1, -1, -1, -1, -1, -1, -1, -1, -1, 183, 93, 139, 160, 102, 164, 82, 63, 157, 213, 203, 492, 519, -1, -1, -1, -1, -1, 128, 119, 131, 107, 69, 105, 183, 74, 183, 191, 204, 514, -1, -1, -1, -1, -1, -1, 134, 102, 91, 178, 188, 61, 44, 66, 106, 202, 202, -1, -1, -1, -1, -1, -1, -1, 68, 81, 152, 104, 25, 31, 202, 113, 93, 237, -1, -1, -1, -1, -1, -1, -1, -1, 43, 26, 16, 19, 23, 236, 55, 77, 101, -1, -1, -1, -1, -1, -1, -1, -1, 5, 14, 16, 102, 190, 27, 33, 131, 158, 179, -1, -1, -1, -1, -1, -1, -1, 4, -10, 52, 26, 97, 91, 197, 178, 111, 109, 170, -1, -1, -1, -1, -1, -1, 0, 0, -27, 92, 39, 30, 140, 48, 43, 8, 10, 110, -1, -1, -1, -1, -1, -12, -59, -1, -5, 144, 205, 185, 163, 77, 146, 123, 6, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, 33, 121, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 154, 214, 190, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 179, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, -1, -1),
          (-1, -1, -1, -1, 139, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 179, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 190, 214, 154, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 31, 121, 33, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5, 6, 123, 146, 77, 163, 185, 205, 144, -5, -1, -59, -12, -1, -1, -1, -1, -1, 110, 10, 8, 43, 48, 140, 30, 39, 92, -27, 0, 0, -1, -1, -1, -1, -1, -1, 170, 109, 111, 178, 197, 91, 97, 26, 52, -10, 4, -1, -1, -1, -1, -1, -1, -1, 179, 158, 131, 33, 27, 190, 102, 16, 14, 5, -1, -1, -1, -1, -1, -1, -1, -1, 101, 77, 55, 236, 23, 19, 16, 26, 43, -1, -1, -1, -1, -1, -1, -1, -1, 237, 93, 113, 202, 31, 25, 104, 152, 81, 68, -1, -1, -1, -1, -1, -1, -1, 202, 202, 106, 66, 44, 61, 188, 178, 91, 102, 134, -1, -1, -1, -1, -1, -1, 514, 204, 191, 183, 74, 183, 105, 69, 107, 131, 119, 128, -1, -1, -1, -1, -1, 519, 492, 203, 213, 157, 63, 82, 164, 102, 160, 139, 93, 183, -1, -1, -1, -1, -1, -1, -1, -1, -1, 193, 41, 118, 52, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 202, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 103, 157, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1))
    return sum([ data[player][i] for i in peg_positions(board, player) ])


def euclidean_distance(a,b):
    '''Distance between two points on the board, not sure if this is the most
    effective distance function possible, but it should work.
    
    It respects the 3 properties of a distance function
    '''
    coord = lambda p : ((p-p%17)/17, p%17)
    dist= lambda c1,c2: sqrt(((c1[0]-c2[0])**2) + ((c1[1]-c2[1])**2))
    
    a=coord(a)
    b=coord(b)
    
    return dist (a,b)

def euclidean_distance_from_target(board,player,target=None):
    '''Returns the total distance of all the marbles to the target.
    Marbles on the target return 0
    
    Board is a linear array representing the board
    Player is an int indicating the id of the player, it can be an int or a
    string of 1 byte
    
    Target is the id of the target positions (refer to REVERSED_FULL_BOARD
    to better understand that).
    It can be an int or a string of 1 byte
    '''
    if target==None:
        target=OPPOSITES[int(player)]
    
    target = list(REVERSED_FULL_BOARD[str(target)])
    marbles=[]
    
    for i in xrange(len(board)):
        if board[i] == str(player):
            if i not in target:
                marbles.append(i)
            else: 
                target.remove(i)
    dist=lambda a,b: euclidean_distance(a,b)#**2
    return reduce ((lambda a,b:a+b),map(dist,marbles,target),0.0)
    
    pass

def update_board(board, move):
    l = list(board)
    tmp = l[move[0]]
    l[move[0]] = EMPTY
    l[move[-1]] = tmp
    return ''.join(l)

def is_on_board(n):
    """True if position n is inside the board."""
    return n >= 0 and n < BOARD_LENGTH

def is_occupied(board, n):
    """True if position n a valid but occupied position."""
    return board[n] not in (INVALID, EMPTY)

def is_empty(board, n):
    """True if position n is a valid empty position."""
    return board[n] == EMPTY

def is_valid_stop(n, peg_id):
    """True if peg_id is allowed to stop at position n."""
    ## TODO: should this use the initial board that the server created?
    return FULL_BOARD[n] in (PEG_IDS[peg_id], EMPTY,
                             PEG_IDS[OPPOSITES[peg_id]])

def peg_positions(board, peg_id):
    """The positions of all pegs with the given id."""
    return [ x for x in range(len(board))
             if board[x] == PEG_IDS[peg_id] ]

def won(board, player_id):
    """ Return true if player with id player_id has won, else false. """
    goal_nest = OPPOSITES[player_id]
    nest = REVERSED_FULL_BOARD[str(goal_nest)]
    for target_peg in nest:
        if board[target_peg] !=  str(player_id):
            return False
    return True

def adjacent(n):
    """The board positions that are adjacent to n. It is legal to move
    from n to one of these positions if that positions is
    unoccupied."""
    return [ (n-x) for x in NEIGHBORS if is_on_board(n-x) ]

def jumps(n):
    """The board positions that can be jumped to from n. Returns
    tuples of (dest,chk). It is legal to move to a dest position if
    the chk position is occupied by another peg."""
    return [ ((n-x*2), n-x) for x in NEIGHBORS
             if is_on_board(n-x) and is_on_board(n-x*2) ]

def available_moves(board, initial, first=True, jumped=[]):
    """Generates all moves for a given peg that starts at position
    'initial'."""
    # First try to move without jumping (unless already jumping)
    if first:
        for i in adjacent(initial):
            if is_empty(board, i) and not i in jumped:
                yield jumped + [initial, i]
    # Now try jumping.
    path = jumped + [initial]
    for dest, chk in jumps(initial):
        if is_empty(board, dest) and is_occupied(board, chk) and \
                not dest in jumped:
            yield path + [dest]
            for j in available_moves(board, dest, False, path):
                yield j

def all_moves(board, peg_id):
    """All legal moves for all the player's pegs."""
    for i in peg_positions(board, peg_id):
        for move in available_moves(board, i):
            if is_valid_stop(move[-1], peg_id):
                yield move

def run_tests():
    board = '####1################11###############111##############1111#########             #####            ######           #######          ########         ########          #######           ######            #####             #########2222##############222###############22################2###'
    ma1 = list(all_moves(board, 1))
    ma2 = list(all_moves(board, 2))
    if len(ma1) != len(ma2):
        print "Players have different numbers of legal moves"
        print ma1, ma2
    if len([x for x in ma1 if len(x) > 2]) != 0:
        print 'Player 1 should at most be able to jump once'
        print ma1
    # Player 1 makes a jump
    board = '####1################11###############11 ##############1111#########        1    #####            ######           #######          ########         ########          #######           ######            #####             #########2222##############222###############22################2###'
    mb1 = list(all_moves(board, 1))
    mb2 = list(all_moves(board, 2))
    if len(ma2) != len(mb2):
        print 'Player 2 suddenly has more legal moves'
        print ma2, mb2
    if len(ma1) >= len(mb1):
        print "Player 1 did not get more moves"
        print ma1, mb1
    if len([x for x in mb1 if len(x) > 2]) == 0:
        print "Player 1 did not get any three-step jumps"
        print mb1
    board = '#### ################11############### 11##############1111#########    1 1      #####            ######           #######          ########         ########          #######           ######            #####    22       #########2222##############2  ###############22################2###'
    mc1 = list(all_moves(board, 1))
    print mc1
    print "ok"


if __name__ == "__main__":
    run_tests()
